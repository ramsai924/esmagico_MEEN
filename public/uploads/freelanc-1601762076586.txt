// var request = require('request');

// function awsData(){
//     return new Promise(function (responsed, reject){
//         request({
//             url: 'https://apexacorp.auth0.com/oauth/token',
//             method: 'POST',
//             headers: {
//                 Accept: 'application/json',
//                 'Content-Type': 'application/json'
//             },
//             body: JSON.stringify({
//                 client_id: 'iw7G0iAzHpDLIE2XeXL5A2wr4FFBJPmy',
//                 client_secret: 'pMd5Qo38t9ooVfwuBqsScgQPnz7AIQcyTnmLQgun_l9SD45JGcYOHCf4smLz-iiK',
//                 audience: 'lcm.apexacorp.com/api/v1',
//                 grant_type: 'client_credentials',
//             })
//         }, function (error, response, body) {
//             if (!error && response.statusCode === 200) {
//                 responsed(body)
//             }else if(error){
//                 reject(error)
//             }

//         });
//     })
// }
// awsData().then((data) => {
//     var parseData = JSON.parse(data)
//         request({
//             url: 'https://apexaiq.com/api/v1/device',
//             method: 'GET',
//             headers: {
//                 authorization: `Bearer ${parseData.access_token}`
//             }
//         }, function (error, response, body) {
//             if (error) {
//                 console.log(error)
//             } else {
//             //  var sampleData = JSON.parse(body)
              
//                //console.log(sampleData) //data
//                 console.log(JSON.parse(body))
//             }
//         })
// }).catch((err) => {
//     console.log(err)
// })

const express = require('express');
const logger = require("basic-logger")
const app = express();
const AWS = require('aws-sdk');
const get = require('lodash.get')

const env = require('./conf/ec2.env.js');


const PipelineDefinition = {
  provider: 'AWS',
  authenticationType: 'keyPair',
  secretKey: env.AWS_SECRET_ACCESS_KEY,
  accessKey: env.AWS_ACCESS_KEY,
  endPoints: [{
    name: 'EC2',
    region: 'us-east-2'
  },
  {
    name: 'RDS',
    region: 'us-east-2'
  }],
  fieldMappings: {
    RDS: {},
    EC2: {}
  }
}

var eg =  {
  provider: 'AWS',
  authenticationType: 'keyPair',
  secretKey: env.AWS_SECRET_ACCESS_KEY,
  accessKey: env.AWS_ACCESS_KEY,
  endPoints: [{
    name: 'EC2',
    region: 'us-east-2'
  },
  {
    name: 'RDS',
    region: 'us-east-2'
  }],
  fieldMappings: {
    RDS: {},
    EC2: {}
  },
  configData: function () {
    this.endPoints.forEach(async function(en){
      AWS.config.update({
        accessKeyId: eg.accessKey,
        secretAccessKey: eg.secretKey,
        region: en.region
      });

      switch (en.name) {
        case "EC2":

          const ec2Client1 = new AWS.EC2();
          var params1 = {
            DryRun: false
          };
          await ec2Client1.describeInstances(params1, function (err, data) {
            if (err) {
              console.log("Error", err.stack);
            } else {
              console.log("------------------EC2-------------------------------------");

              var result = JSON.stringify(data);
              var Data = JSON.parse(result)
             
              Data.Reservations.forEach(function(ele){
                eg.fieldMappings.EC2 = {
      
                    device_name : ele.Instances[0].Tags[0].Value,
                    ip_address: ele.Instances[0].NetworkInterfaces[0].Association.PublicIp,
                    mac_address: ele.Instances[0].NetworkInterfaces[0].MacAddress,
                    location: ele.Instances[0].Placement.AvailabilityZone,
                    asset_tag: ele.Instances[0].PublicDnsName,
                    description: ele.Instances[0].ImageId,
                    software_version: "",
                    full_package: ele.Instances[0]

                }

              

              })
             result
            }
          });
          break;
        case "RDS":

          //  var rds = new AWS.RDS({apiVersion: '2014-10-31'});

          //  var params = {  }; 

          //  rds.describeDBSnapshots(params, function(err, data) {

          //    if (err) {
          //       console.log("Error", err.stack);
          //      } else {
          //      console.log("------------------RDS-------------------------------------");
          //      var d2 = JSON.stringify(data);
          PipelineDefinition.fieldMappings[en.name] = "rdsData(d2)";
          //     result()
          //    }
          //  });
          break;
      }

    })
  
  }
}


eg.configData()

function result(){
  console.log(eg)
}



// PipelineDefinition.endPoints.forEach(async (en) => {
//   AWS.config.update({
//     accessKeyId: PipelineDefinition.accessKey,
//     secretAccessKey: PipelineDefinition.secretKey,
//     region: en.region
//   });

//   switch (en.name) {
//     case "EC2":

//       const ec2Client1 = new AWS.EC2();
//       var params1 = {
//         DryRun: false
//       };
//       await ec2Client1.describeInstances(params1, function (err, data) {
//         if (err) {
//           console.log("Error", err.stack);
//         } else {
//           console.log("------------------EC2-------------------------------------");

//           var d1 = JSON.stringify(data);

//           PipelineDefinition.fieldMappings[en.name] = ec2Data(d1);

//           result()
//         }
//       });
//       break;
//     case "RDS":

//       //  var rds = new AWS.RDS({apiVersion: '2014-10-31'});

//       //  var params = {  }; 

//       //  rds.describeDBSnapshots(params, function(err, data) {

//       //    if (err) {
//       //       console.log("Error", err.stack);
//       //      } else {
//       //      console.log("------------------RDS-------------------------------------");
//       //      var d2 = JSON.stringify(data);
//       PipelineDefinition.fieldMappings[en.name] = "rdsData(d2)";
//       //     result()
//       //    }
//       //  });
//       break;
//   }

// })

// function result() {
//   if (Object.keys(PipelineDefinition.fieldMappings.EC2).length != 0 && Object.keys(PipelineDefinition.fieldMappings.RDS).length) {
//     console.log(PipelineDefinition.fieldMappings)
//   }
// }


// function ec2Data(n) {
//   var n1 = JSON.parse(n);
//   var arr = n1.Reservations.map((data) => {
//     return {
//       device_name : get(data,'Instances[0].Tags[0].Value',''),
//       ip_address : get(data,'Instances[0].Tags[0].Value','')
//       // device_name : data.Instances[0].Tags[0].Value,
//       // ip_address: data.Instances[0].NetworkInterfaces[0].Association.PublicIp,
//       // mac_address: data.Instances[0].NetworkInterfaces[0].MacAddress,
//       // location: data.Instances[0].Placement.AvailabilityZone,
//       // asset_tag: data.Instances[0].PublicDnsName,
//       // description: data.Instances[0].ImageId,
//       // software_version: "",
//       // full_package: data.Instances[0]
//     }

//   })
//   return arr;
// }

// function rdsData(n) {
//   return n;
// }

app.listen(3000, () => {
  console.log("Listening to port 3000")
})